# DO NOT MODIFY THIS FILE. This file is automatically generated by Tina
"""References another document, used as a foreign key"""
scalar Reference

""""""
scalar JSON

type SystemInfo {
  filename: String!
  title: String
  basename: String!
  hasReferences: Boolean
  breadcrumbs(excludeExtension: Boolean): [String!]!
  path: String!
  relativePath: String!
  extension: String!
  template: String!
  collection: Collection!
}

type Folder {
  name: String!
  path: String!
}

type PageInfo {
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
  startCursor: String!
  endCursor: String!
}

""""""
interface Node {
  id: ID!
}

""""""
interface Document {
  id: ID!
  _sys: SystemInfo
  _values: JSON!
}

"""A relay-compliant pagination connection"""
interface Connection {
  totalCount: Float!
  pageInfo: PageInfo!
}

type Query {
  getOptimizedQuery(queryString: String!): String
  collection(collection: String): Collection!
  collections: [Collection!]!
  node(id: String): Node!
  document(collection: String, relativePath: String): DocumentNode!
  services(relativePath: String): Services!
  servicesConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: ServicesFilter): ServicesConnection!
  pages(relativePath: String): Pages!
  pagesConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: PagesFilter): PagesConnection!
  locations(relativePath: String): Locations!
  locationsConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: LocationsFilter): LocationsConnection!
  testimonials(relativePath: String): Testimonials!
  testimonialsConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: TestimonialsFilter): TestimonialsConnection!
}

input DocumentFilter {
  services: ServicesFilter
  pages: PagesFilter
  locations: LocationsFilter
  testimonials: TestimonialsFilter
}

type DocumentConnectionEdges {
  cursor: String!
  node: DocumentNode
}

type DocumentConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [DocumentConnectionEdges]
}

type Collection {
  name: String!
  slug: String!
  label: String
  path: String!
  format: String
  matches: String
  templates: [JSON]
  fields: [JSON]
  documents(before: String, after: String, first: Float, last: Float, sort: String, filter: DocumentFilter, folder: String): DocumentConnection!
}

union DocumentNode = Services | Pages | Locations | Testimonials | Folder

type Services implements Node & Document {
  title: String!
  description: String!
  priceRange: String!
  category: String!
  icon: String
  order: Float
  body: JSON
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input StringFilter {
  startsWith: String
  eq: String
  exists: Boolean
  in: [String]
}

input NumberFilter {
  lt: Float
  lte: Float
  gte: Float
  gt: Float
  eq: Float
  exists: Boolean
  in: [Float]
}

input RichTextFilter {
  startsWith: String
  eq: String
  exists: Boolean
}

input ServicesFilter {
  title: StringFilter
  description: StringFilter
  priceRange: StringFilter
  category: StringFilter
  icon: StringFilter
  order: NumberFilter
  body: RichTextFilter
}

type ServicesConnectionEdges {
  cursor: String!
  node: Services
}

type ServicesConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [ServicesConnectionEdges]
}

type Pages implements Node & Document {
  title: String!
  description: String
  body: JSON
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input PagesFilter {
  title: StringFilter
  description: StringFilter
  body: RichTextFilter
}

type PagesConnectionEdges {
  cursor: String!
  node: Pages
}

type PagesConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [PagesConnectionEdges]
}

type LocationsOpeningHours {
  weekdays: String
  saturday: String
  sunday: String
}

type Locations implements Node & Document {
  title: String!
  address: String!
  postalCode: String!
  city: String!
  phone: String!
  email: String!
  openingHours: LocationsOpeningHours
  body: JSON
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input LocationsOpeningHoursFilter {
  weekdays: StringFilter
  saturday: StringFilter
  sunday: StringFilter
}

input LocationsFilter {
  title: StringFilter
  address: StringFilter
  postalCode: StringFilter
  city: StringFilter
  phone: StringFilter
  email: StringFilter
  openingHours: LocationsOpeningHoursFilter
  body: RichTextFilter
}

type LocationsConnectionEdges {
  cursor: String!
  node: Locations
}

type LocationsConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [LocationsConnectionEdges]
}

type Testimonials implements Node & Document {
  name: String!
  location: String
  rating: Float!
  date: String
  body: JSON
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input TestimonialsFilter {
  name: StringFilter
  location: StringFilter
  rating: NumberFilter
  date: StringFilter
  body: RichTextFilter
}

type TestimonialsConnectionEdges {
  cursor: String!
  node: Testimonials
}

type TestimonialsConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [TestimonialsConnectionEdges]
}

type Mutation {
  addPendingDocument(collection: String!, relativePath: String!, template: String): DocumentNode!
  updateDocument(collection: String, relativePath: String!, params: DocumentUpdateMutation!): DocumentNode!
  deleteDocument(collection: String, relativePath: String!): DocumentNode!
  createDocument(collection: String, relativePath: String!, params: DocumentMutation!): DocumentNode!
  createFolder(collection: String, relativePath: String!): DocumentNode!
  updateServices(relativePath: String!, params: ServicesMutation!): Services!
  createServices(relativePath: String!, params: ServicesMutation!): Services!
  updatePages(relativePath: String!, params: PagesMutation!): Pages!
  createPages(relativePath: String!, params: PagesMutation!): Pages!
  updateLocations(relativePath: String!, params: LocationsMutation!): Locations!
  createLocations(relativePath: String!, params: LocationsMutation!): Locations!
  updateTestimonials(relativePath: String!, params: TestimonialsMutation!): Testimonials!
  createTestimonials(relativePath: String!, params: TestimonialsMutation!): Testimonials!
}

input DocumentUpdateMutation {
  services: ServicesMutation
  pages: PagesMutation
  locations: LocationsMutation
  testimonials: TestimonialsMutation
  relativePath: String
}

input DocumentMutation {
  services: ServicesMutation
  pages: PagesMutation
  locations: LocationsMutation
  testimonials: TestimonialsMutation
}

input ServicesMutation {
  title: String
  description: String
  priceRange: String
  category: String
  icon: String
  order: Float
  body: JSON
}

input PagesMutation {
  title: String
  description: String
  body: JSON
}

input LocationsOpeningHoursMutation {
  weekdays: String
  saturday: String
  sunday: String
}

input LocationsMutation {
  title: String
  address: String
  postalCode: String
  city: String
  phone: String
  email: String
  openingHours: LocationsOpeningHoursMutation
  body: JSON
}

input TestimonialsMutation {
  name: String
  location: String
  rating: Float
  date: String
  body: JSON
}

schema {
  query: Query
  mutation: Mutation
}
